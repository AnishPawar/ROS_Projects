// Generated by gencpp from file Robot_Messages/HardwareStatus.msg
// DO NOT EDIT!


#ifndef ROBOT_MESSAGES_MESSAGE_HARDWARESTATUS_H
#define ROBOT_MESSAGES_MESSAGE_HARDWARESTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace Robot_Messages
{
template <class ContainerAllocator>
struct HardwareStatus_
{
  typedef HardwareStatus_<ContainerAllocator> Type;

  HardwareStatus_()
    : temprature(0.0)
    , motor_status(false)
    , debug_msg()  {
    }
  HardwareStatus_(const ContainerAllocator& _alloc)
    : temprature(0.0)
    , motor_status(false)
    , debug_msg(_alloc)  {
  (void)_alloc;
    }



   typedef double _temprature_type;
  _temprature_type temprature;

   typedef uint8_t _motor_status_type;
  _motor_status_type motor_status;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _debug_msg_type;
  _debug_msg_type debug_msg;





  typedef boost::shared_ptr< ::Robot_Messages::HardwareStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Robot_Messages::HardwareStatus_<ContainerAllocator> const> ConstPtr;

}; // struct HardwareStatus_

typedef ::Robot_Messages::HardwareStatus_<std::allocator<void> > HardwareStatus;

typedef boost::shared_ptr< ::Robot_Messages::HardwareStatus > HardwareStatusPtr;
typedef boost::shared_ptr< ::Robot_Messages::HardwareStatus const> HardwareStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::Robot_Messages::HardwareStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::Robot_Messages::HardwareStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::Robot_Messages::HardwareStatus_<ContainerAllocator1> & lhs, const ::Robot_Messages::HardwareStatus_<ContainerAllocator2> & rhs)
{
  return lhs.temprature == rhs.temprature &&
    lhs.motor_status == rhs.motor_status &&
    lhs.debug_msg == rhs.debug_msg;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::Robot_Messages::HardwareStatus_<ContainerAllocator1> & lhs, const ::Robot_Messages::HardwareStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace Robot_Messages

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::Robot_Messages::HardwareStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::Robot_Messages::HardwareStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::Robot_Messages::HardwareStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::Robot_Messages::HardwareStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::Robot_Messages::HardwareStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::Robot_Messages::HardwareStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::Robot_Messages::HardwareStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "882ce153f5082c30d832d8d4f8e9fe20";
  }

  static const char* value(const ::Robot_Messages::HardwareStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x882ce153f5082c30ULL;
  static const uint64_t static_value2 = 0xd832d8d4f8e9fe20ULL;
};

template<class ContainerAllocator>
struct DataType< ::Robot_Messages::HardwareStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Robot_Messages/HardwareStatus";
  }

  static const char* value(const ::Robot_Messages::HardwareStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::Robot_Messages::HardwareStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 temprature\n"
"bool motor_status\n"
"string debug_msg\n"
;
  }

  static const char* value(const ::Robot_Messages::HardwareStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::Robot_Messages::HardwareStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.temprature);
      stream.next(m.motor_status);
      stream.next(m.debug_msg);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HardwareStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::Robot_Messages::HardwareStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::Robot_Messages::HardwareStatus_<ContainerAllocator>& v)
  {
    s << indent << "temprature: ";
    Printer<double>::stream(s, indent + "  ", v.temprature);
    s << indent << "motor_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motor_status);
    s << indent << "debug_msg: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.debug_msg);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_MESSAGES_MESSAGE_HARDWARESTATUS_H
