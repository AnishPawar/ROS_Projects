// Generated by gencpp from file custom_msgs/first_message.msg
// DO NOT EDIT!


#ifndef CUSTOM_MSGS_MESSAGE_FIRST_MESSAGE_H
#define CUSTOM_MSGS_MESSAGE_FIRST_MESSAGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace custom_msgs
{
template <class ContainerAllocator>
struct first_message_
{
  typedef first_message_<ContainerAllocator> Type;

  first_message_()
    : temprature(0)
    , motor_stat(false)
    , debug_message()  {
    }
  first_message_(const ContainerAllocator& _alloc)
    : temprature(0)
    , motor_stat(false)
    , debug_message(_alloc)  {
  (void)_alloc;
    }



   typedef int64_t _temprature_type;
  _temprature_type temprature;

   typedef uint8_t _motor_stat_type;
  _motor_stat_type motor_stat;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _debug_message_type;
  _debug_message_type debug_message;





  typedef boost::shared_ptr< ::custom_msgs::first_message_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_msgs::first_message_<ContainerAllocator> const> ConstPtr;

}; // struct first_message_

typedef ::custom_msgs::first_message_<std::allocator<void> > first_message;

typedef boost::shared_ptr< ::custom_msgs::first_message > first_messagePtr;
typedef boost::shared_ptr< ::custom_msgs::first_message const> first_messageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_msgs::first_message_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_msgs::first_message_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::custom_msgs::first_message_<ContainerAllocator1> & lhs, const ::custom_msgs::first_message_<ContainerAllocator2> & rhs)
{
  return lhs.temprature == rhs.temprature &&
    lhs.motor_stat == rhs.motor_stat &&
    lhs.debug_message == rhs.debug_message;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::custom_msgs::first_message_<ContainerAllocator1> & lhs, const ::custom_msgs::first_message_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace custom_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::custom_msgs::first_message_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msgs::first_message_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msgs::first_message_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msgs::first_message_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msgs::first_message_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msgs::first_message_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_msgs::first_message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f537432f8f1c04503d008c5851a94e1d";
  }

  static const char* value(const ::custom_msgs::first_message_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf537432f8f1c0450ULL;
  static const uint64_t static_value2 = 0x3d008c5851a94e1dULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_msgs::first_message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_msgs/first_message";
  }

  static const char* value(const ::custom_msgs::first_message_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_msgs::first_message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 temprature\n"
"bool motor_stat\n"
"string debug_message\n"
;
  }

  static const char* value(const ::custom_msgs::first_message_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_msgs::first_message_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.temprature);
      stream.next(m.motor_stat);
      stream.next(m.debug_message);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct first_message_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_msgs::first_message_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_msgs::first_message_<ContainerAllocator>& v)
  {
    s << indent << "temprature: ";
    Printer<int64_t>::stream(s, indent + "  ", v.temprature);
    s << indent << "motor_stat: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motor_stat);
    s << indent << "debug_message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.debug_message);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_MSGS_MESSAGE_FIRST_MESSAGE_H
